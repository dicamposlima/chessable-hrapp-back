swagger: "2.0"
info:
  description: "This API models an HR App. It allows managing company departments and employees. Furthermore some reports have been implemented."
  version: "1.0.0"
  title: "Documentation - Chessable HR App"
  contact:
    email: "dicamposlima@gmail.com"
host: "desolate-mountain-55327.herokuapp.com"
basePath: "/api/v1"
tags:
- name: "departments"
  description: "Create, update, delete or list company departments"
- name: "employees"
  description: "Create, update, delete or list company employees"
schemes:
- "https"
- "http"
paths:
  /departments:
    post:
      tags:
      - "departments"
      summary: "Add a new department"
      description: ""
      operationId: "addDepartment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Department that needs to be added to the HR system"
        required: true
        schema:
          $ref: "#/definitions/departments"
      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "Successfully added"
    get:
      tags:
      - "departments"
      summary: "Find departments"
      description: "Returns all departments"
      operationId: "getDepartments"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Offset for paging"
        type: "integer"
      - name: "filter"
        in: "query"
        description: "Text to be filtered for"
        type: "string"
      - name: "order_field"
        in: "query"
        description: "Column to be sorted by"
        type: "string"
      - name: "order_dir"
        in: "query"
        description: "Sorting direction"
        type: "string"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/departments"
        "404":
          description: "Departments not found"
  /departments/highestSalary:
    get:
      tags:
      - "departments"
      summary: "Finds departments with the highest employee salary"
      description: ""
      operationId: "findDepartmentsByHighestSalary"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/departmentsHighestSalary"
        "404":
          description: "Not found"
  /departments/withFilter:
    get:
      tags:
      - "departments"
      summary: "Finds departments with filter by number of employees and their salary"
      description: "More than x employees (x defined by a parameter) that earn a salary higher than a given parameter y"
      operationId: "findDepartmentsWithFilter"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/departmentsWithFilterParameters"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/departmentsWithFilter"
        "404":
          description: "Not found"
  /departments/details/{departmentId}:
    get:
      tags:
      - "departments"
      summary: "Find department by ID"
      description: "Returns a single department"
      operationId: "getDepartmentById"
      produces:
      - "application/json"
      parameters:
      - name: "departmentId"
        in: "path"
        description: "ID of department to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/departments"
        "404":
          description: "Department not found"
  /departments/{departmentId}: 
    put:
      tags:
      - "departments"
      summary: "Update an existing department"
      description: ""
      operationId: "updateDepartment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "departmentId"
        in: "path"
        description: "Department id to edit"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Department object that needs to be updated in the HR system"
        required: true
        schema:
          $ref: "#/definitions/departments"
      responses:
        "400":
          description: "Invalid ID supplied"
        "200":
          description: "Successfully updated"
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "departments"
      summary: "Deletes a department"
      description: ""
      operationId: "deleteDepartment"
      produces:
      - "application/json"
      parameters:
      - name: "departmentId"
        in: "path"
        description: "Department id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "200":
          description: "Successfully deleted"
  /employees:
    post:
      tags:
      - "employees"
      summary: "Add a new employee"
      description: ""
      operationId: "addEmployee"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Employee that needs to be added to the HR system"
        required: true
        schema:
          $ref: "#/definitions/employees"
      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "Successfully added"
    get:
      tags:
      - "employees"
      summary: "Find employees"
      description: "Returns all employees"
      operationId: "getEmployees"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Offset for paging"
        type: "integer"
      - name: "filter"
        in: "query"
        description: "Text to be filtered for"
        type: "string"
      - name: "order_field"
        in: "query"
        description: "Column to be sorted by"
        type: "string"
      - name: "order_dir"
        in: "query"
        description: "Sorting direction"
        type: "string"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/employeesGet"
        "404":
          description: "Employees not found"      
  /employees/details/{employeeId}:
    get:
      tags:
      - "employees"
      summary: "Find employee by ID"
      description: "Returns a single employee"
      operationId: "getEmployeeById"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/employeesGet"
        "404":
          description: "Employee not found"
  /employees/{employeeId}: 
    put:
      tags:
      - "employees"
      summary: "Update an existing employee"
      description: ""
      operationId: "updateEmployee"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee id to edit"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Employee object that needs to be updated in the HR system"
        required: true
        schema:
          $ref: "#/definitions/employees"
      responses:
        "400":
          description: "Invalid ID supplied"
        "200":
          description: "Successfully updated"
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "employees"
      summary: "Deletes an employee"
      description: ""
      operationId: "deleteEmployee"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "200":
          description: "Successfully deleted"        
definitions:
  employees:
    type: "object"
    required:
    - "id_department"
    - "name"
    - "position"
    - "salary"
    - "hiring_date"
    - "status"
    properties:
      id_department:
        type: "integer"
        example: "1"
      name:
        type: "string"
        example: "Diego Campos"
      position:
        type: "string"
        example: "Software developer"
      salary:
        type: "number"
        example: "51000.00"
      hiring_date:
        type: "string"
        example: "2020-03-25"
      status:
        type: "integer"
        example: "1" 
  employeesGet:
    type: "object"
    required:
    - "id"
    - "id_department"
    - "department_name"
    - "name"
    - "position"
    - "salary"
    - "hiring_date"
    - "status"
    properties:
      id:
        type: "integer"
        example: "1"
      id_department:
        type: "integer"
        example: "1"
      department_name:
        type: "string"
        example: "Purchasing"
      name:
        type: "string"
        example: "Diego Campos"
      position:
        type: "string"
        example: "Software developer"
      salary:
        type: "number"
        example: "51000.00"
      hiring_date:
        type: "string"
        example: "2020-03-25"
      status:
        type: "integer"
        example: "1"    
  departments:
    type: "object"
    required:
    - "name"
    - "description"
    properties:
      name:
        type: "string"
        example: "Purchasing"
      description:
        type: "string"
        example: "Lorem ipsum"
  departmentsHighestSalary:
    type: "object"
    properties:
      id:
        type: "integer"
        example: "1"
      name:
        type: "string"
        example: "Purchasing"
      highest_salary:
        type: "number"
        example: "51000.00"
  departmentsWithFilter:
    type: "object"
    properties:
      id:
        type: "integer"
        example: "1"
      name:
        type: "string"
        example: "Purchasing"
      x_employees_x_salary:
        type: "integer"
        example: "3"
  departmentsWithFilterParameters:
    type: "object"
    properties:
      employees:
        type: "integer"
        example: "1"
        description: "Minimum number of employees with a certain salary"
      salary:
        type: "number"
        example: "51000.00"
        description: "Minimum salary to filter"